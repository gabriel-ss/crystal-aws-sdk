module AWS::<%= module_name %>
  class <%= shape_name %><% if error? %> < Error<% else %>
    include ::JSON::Serializable
    <% end -%>

<%- shape_members.each do |shape| %>
    <%- unless error? -%>
    @[::JSON::Field(key: "<%= shape.name %>"<%= ", ignore_serialize: true" if !shape.json_serializable? %><% unless shape.converter.nil? %>, converter: <%= shape.converter %><% end %>)]
    <%- end -%>
    property <%= shape.property_name %> : <%= shape.rendered_type %><%= "?" unless shape.is_required? %>
<% end %>

    def initialize(
    <%- shape_members.each do |shape| -%>
      @<%= shape.property_name %> : <%= shape.rendered_type %><%= "? = nil" unless shape.is_required? %>,
    <%- end -%>
    )
    end


    <%- if has_header_params? -%>
    <%= shape_members.select(&.http_header.!= nil) %>
    def make_headers
      headers = HTTP::Headers.new
      <%- shape_members.select(&.http_header.!= nil).each do |shape| -%>
      __<%= shape.property_name %> = value.<%= shape.property_name %>
      headers.add("<%= shape.http_header.not_nil! %>", __<%= shape.property_name %>.to_s)<%= " unless __#{shape.property_name}.nil?" unless shape.is_required? %>
      <%- end -%>
      headers
    end
    <%- else -%>
    def make_headers
    end
    <%- end -%>

    <%- if has_query_params? -%>
    def make_params
      params = URI::Params.new
      <%- shape_members.select(&.http_query_param.!= nil).each do |shape| -%>
      __<%= shape.property_name %> = value.<%= shape.property_name %>
      params.add("<%= shape.http_query_param.not_nil! %>", __<%= shape.property_name %>.to_s)<%= " unless __#{shape.property_name}.nil?" unless shape.is_required? %>
      <%- end -%>
      params
    end
    <%- else -%>
    def make_params
    end
    <%- end -%>
  end

  <% if error? %>
    def self.from_json(pull : ::JSON::PullParser)
      <% shape_members.each do |shape| %>
        __<%= shape.property_name %> = uninitialized ::Union(<%= shape.rendered_type %>)
        __<%= shape.property_name %>_found = false
      <% end %>

        _location = pull.location
        begin
          pull.read_begin_object
        rescue ex : ::JSON::ParseException
          raise ::JSON::SerializableError.new(ex.message, self.class.to_s, nil, *_location, ex)
        end

        until pull.kind.end_object?
          _key_location = pull.location
          case pull.read_object_key
          <% shape_members.each do |shape| %>
            when "<%= shape.name %>"
              begin
                __<%= shape.property_name %> = <%- unless shape.converter.nil? -%>
                    <%= shape.converter %>.from_json(pull)
                  <%- else -%>
                    ::Union(<%= shape.rendered_type %>).new(pull)
                  <%- end -%>
                __<%= shape.property_name %>_found = true
              rescue ex : ::JSON::ParseException
                raise ::JSON::SerializableError.new(ex.message, self.class.to_s, "<%= shape.name %>", *_key_location, ex)
              end
          <%- end %>
          end
        end
        pull.read_next

        <%- shape_members.each do |shape| -%>
        <%- if shape.is_required? -%>
        raise ::JSON::SerializableError.new("Missing JSON attribute: <%= shape.name %>", self.class.to_s, nil, *_location, nil) unless __<%= shape.property_name %>_found
        <%- end -%>
        <%- end -%>

      <%= shape_name %>.new(
        <%- shape_members.each do |shape| -%>
        <%= shape.property_name %><% unless shape.is_required? %> = __<%= shape.property_name %>_found ? __<%= shape.property_name %> : <%= shape.default || "nil" %><% end %>,
        <%- end -%>
      )
    end
  <% end %>
end

